*** Begin Patch
*** Update File: index.html
@@
-      /* === Galería Mosaic (1 grande + 2 pequeñas en loop) === */
-      .gm{ position:relative; background:transparent; }
-      .gm-viewport{ overflow:hidden; width:100%; }
-      .gm-track{ display:flex; will-change:transform; transition: transform .6s ease; }
-      .gm-slide{
-        min-width:100%;
-        display:grid; gap:14px;
-        grid-template-columns: 2fr 1fr;
-      }
-      .gm-col{ display:grid; gap:14px; grid-template-rows: 1fr 1fr; }
-
-      /* Aspect ratios + bordes redondeados */
-      .gm-big{ margin:0; aspect-ratio: 16/9; }
-      .gm-small{ margin:0; aspect-ratio: 1/1; }
-      .gm-big img, .gm-small img{
-        width:100%; height:100%; object-fit:cover;
-        border-radius:18px; display:block;
-        box-shadow: 0 8px 20px rgba(0,0,0,.15);
-      }
+      /* === Galería Mosaic (1 grande + 2 pequeñas en loop) === */
+      .gm{
+        --gm-gap:14px;
+        --gm-radius:18px;
+        --gm-h: clamp(280px, 55vh, 520px); /* controla la altura total del mosaico */
+        position:relative; background:transparent;
+      }
+      .gm-viewport{ overflow:hidden; width:100%; }
+      .gm-track{ display:flex; will-change:transform; transition: transform .6s ease; }
+      .gm-slide{
+        min-width:100%;
+        display:grid; gap:var(--gm-gap);
+        grid-template-columns: 2fr 1fr;
+        align-items:stretch;
+      }
+      .gm-col{
+        display:grid; gap:var(--gm-gap);
+        grid-template-rows: 1fr 1fr;
+      }
+      /* Tamaños + bordes redondeados (sin crecimientos gigantes) */
+      .gm-big, .gm-small{ margin:0; border-radius:var(--gm-radius); overflow:hidden; }
+      .gm-big, .gm-col{ height: var(--gm-h); }
+      .gm-small{ height: calc((var(--gm-h) - var(--gm-gap)) / 2); }
+      .gm-big img, .gm-small img{
+        width:100%; height:100%; object-fit:cover; display:block;
+        border-radius:var(--gm-radius);
+        box-shadow: 0 8px 20px rgba(0,0,0,.15);
+      }
@@
-      @media (max-width:820px){
-        .gm-slide{ grid-template-columns: 1fr; grid-auto-rows:auto; }
-        .gm-col{ grid-template-columns: 1fr 1fr; grid-template-rows:none; }
-      }
+      @media (max-width:820px){
+        .gm-slide{ grid-template-columns: 1fr; grid-auto-rows:auto; }
+        .gm-col{
+          grid-template-columns: 1fr 1fr;
+          grid-template-rows:none;
+          height: calc(var(--gm-h) - 0px);
+        }
+      }
@@
-<section id="galeria" class="section" style="padding:0 0 24px">
-  <div class="gm" data-interval="4200">
+<section id="galeria" class="section" style="padding:0 0 24px">
+  <div class="container">
+  <div class="gm" data-speed-fast="2600" data-speed-slow="6000">
     <button class="gm-btn gm-prev" aria-label="Anterior">‹</button>
     <div class="gm-viewport">
       <div class="gm-track">
@@
     <button class="gm-btn gm-next" aria-label="Siguiente">›</button>
     <div class="gm-dots" aria-label="Paginación"></div>
-  </div>
+  </div>
+  </div>
 </section>
@@
-<script>
-document.addEventListener('DOMContentLoaded', () => {
-  const root = document.querySelector('.gm');
-  if(!root) return;
-
-  const track = root.querySelector('.gm-track');
-  const viewport = root.querySelector('.gm-viewport');
-  const prevBtn = root.querySelector('.gm-prev');
-  const nextBtn = root.querySelector('.gm-next');
-  const dotsWrap = root.querySelector('.gm-dots');
-  const interval = parseInt(root.dataset.interval || '4500', 10);
-
-  const slides = Array.from(root.querySelectorAll('.gm-slide'));
-  const n = slides.length;
-
-  // Clones para loop infinito
-  const firstClone = slides[0].cloneNode(true);
-  const lastClone  = slides[slides.length - 1].cloneNode(true);
-  track.appendChild(firstClone);
-  track.insertBefore(lastClone, slides[0]);
-
-  let index = 1; // empezamos en el primer real
-  let timer = null, hovering = false, touching = false;
-
-  function setX(animated = true){
-    track.style.transition = animated ? 'transform .6s ease' : 'none';
-    track.style.transform  = `translateX(-${index * 100}%)`;
-    // activar dot
-    const real = ((index - 1) % n + n) % n;
-    dotsWrap.querySelectorAll('.gm-dot').forEach((d,i)=> d.classList.toggle('is-active', i === real));
-  }
-
-  function buildDots(){
-    dotsWrap.innerHTML = '';
-    for (let i=0; i<n; i++){
-      const b = document.createElement('button');
-      b.className = 'gm-dot' + (i===0 ? ' is-active' : '');
-      b.type = 'button';
-      b.addEventListener('click', ()=> go(i+1, true)); // +1 por el clone inicial
-      dotsWrap.appendChild(b);
-    }
-  }
-
-  function next(manual=false){ index++; setX(true); restart(manual); }
-  function prev(manual=false){ index--; setX(true); restart(manual); }
-  function go(i,manual=false){ index=i; setX(true); restart(manual); }
-
-  // Snap al cruzar clones
-  track.addEventListener('transitionend', ()=>{
-    if (index === 0){ index = n;   setX(false); }
-    if (index === n+1){ index = 1; setX(false); }
-  });
-
-  function start(){
-    stop();
-    timer = setInterval(()=>{ 
-      if(!hovering && !touching && document.visibilityState === 'visible'){ next(); }
-    }, interval);
-  }
-  function stop(){ if(timer){ clearInterval(timer); timer=null; } }
-  function restart(manual){ if(manual){ stop(); start(); } }
-
-  // Controles
-  prevBtn.addEventListener('click', ()=> prev(true));
-  nextBtn.addEventListener('click', ()=> next(true));
-  root.addEventListener('mouseenter', ()=> hovering=true);
-  root.addEventListener('mouseleave', ()=> hovering=false);
-  document.addEventListener('visibilitychange', ()=> document.visibilityState!=='visible' ? stop() : start());
-
-  // Swipe
-  let sx=0, sy=0;
-  viewport.addEventListener('touchstart', (e)=>{ touching=true; const t=e.changedTouches[0]; sx=t.clientX; sy=t.clientY; }, {passive:true});
-  viewport.addEventListener('touchend', (e)=>{ 
-    const t=e.changedTouches[0], dx=t.clientX-sx, dy=t.clientY-sy; touching=false;
-    if(Math.abs(dx)>40 && Math.abs(dx)>Math.abs(dy)){ dx<0 ? next(true) : prev(true); }
-  }, {passive:true});
-
-  // Init
-  buildDots();
-  setX(false);
-  start();
-});
-</script>
+<script>
+document.addEventListener('DOMContentLoaded', () => {
+  const root = document.querySelector('.gm');
+  if(!root) return;
+
+  const track    = root.querySelector('.gm-track');
+  const viewport = root.querySelector('.gm-viewport');
+  const prevBtn  = root.querySelector('.gm-prev');
+  const nextBtn  = root.querySelector('.gm-next');
+  const dotsWrap = root.querySelector('.gm-dots');
+
+  // Velocidades tipo Travely: rápido y más lento en hover
+  const SPEED_FAST = parseInt(root.dataset.speedFast || '2600', 10);
+  const SPEED_SLOW = parseInt(root.dataset.speedSlow || '6000', 10);
+  let curInterval  = SPEED_FAST;
+
+  const slides = Array.from(track.querySelectorAll('.gm-slide'));
+  const n = slides.length;
+  if (n === 0) return;
+
+  // Clones para loop infinito
+  const firstClone = slides[0].cloneNode(true);
+  const lastClone  = slides[n - 1].cloneNode(true);
+  track.insertBefore(lastClone, slides[0]);
+  track.appendChild(firstClone);
+
+  let index = 1;                 // primer slide real
+  let timer = null, touching=false, isAnimating=false;
+
+  function updateDots(){
+    const real = ((index - 1) % n + n) % n;
+    dotsWrap.querySelectorAll('.gm-dot').forEach((d,i)=> d.classList.toggle('is-active', i === real));
+  }
+
+  function setX(animated = true){
+    const dur = (curInterval === SPEED_SLOW) ? '.9s' : '.6s';
+    track.style.transition = animated ? `transform ${dur} ease` : 'none';
+    track.style.transform  = `translateX(-${index * 100}%)`;
+  }
+
+  function buildDots(){
+    dotsWrap.innerHTML = '';
+    for (let i=0; i<n; i++){
+      const b = document.createElement('button');
+      b.className = 'gm-dot' + (i===0 ? ' is-active' : '');
+      b.type = 'button';
+      b.addEventListener('click', ()=> go(i+1, true)); // +1 por el clone inicial
+      dotsWrap.appendChild(b);
+    }
+  }
+
+  function go(i, manual=false){
+    if (isAnimating) return;
+    index = i;
+    isAnimating = true;
+    setX(true);
+    if (manual) restart();
+  }
+  const next = (manual=false)=> go(index+1, manual);
+  const prev = (manual=false)=> go(index-1, manual);
+
+  // Snap al cruzar clones y seguir
+  track.addEventListener('transitionend', ()=>{
+    if (index === 0){ index = n;   setX(false); }
+    else if (index === n+1){ index = 1; setX(false); }
+    isAnimating = false;
+    updateDots();
+  });
+
+  // Autoplay continuo (no se pausa)
+  function start(){
+    stop();
+    timer = setInterval(()=>{
+      if(!touching && document.visibilityState==='visible' && !isAnimating){ next(); }
+    }, curInterval);
+  }
+  function stop(){ if(timer){ clearInterval(timer); timer=null; } }
+  function restart(){ stop(); start(); }
+
+  // Hover: desacelerar (desktop)
+  const canHover = window.matchMedia('(hover:hover) and (pointer:fine)').matches;
+  if (canHover){
+    root.addEventListener('mouseenter', ()=>{ curInterval = SPEED_SLOW; restart(); });
+    root.addEventListener('mouseleave', ()=>{ curInterval = SPEED_FAST; restart(); });
+  }
+
+  // Controles
+  prevBtn.addEventListener('click', ()=> prev(true));
+  nextBtn.addEventListener('click', ()=> next(true));
+  document.addEventListener('visibilitychange', ()=> document.visibilityState!=='visible' ? stop() : start());
+
+  // Swipe
+  let sx=0, sy=0;
+  viewport.addEventListener('touchstart', (e)=>{ touching=true; const t=e.changedTouches[0]; sx=t.clientX; sy=t.clientY; }, {passive:true});
+  viewport.addEventListener('touchend', (e)=>{
+    const t=e.changedTouches[0], dx=t.clientX-sx, dy=t.clientY-sy; touching=false;
+    if(Math.abs(dx)>40 && Math.abs(dx)>Math.abs(dy)){ dx<0 ? next(true) : prev(true); }
+  }, {passive:true});
+
+  // Init
+  buildDots();
+  setX(false);
+  updateDots();
+  start();
+});
+</script>
*** End Patch